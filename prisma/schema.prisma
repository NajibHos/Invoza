generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  projects      Project[]
  invoices      Invoice[]
  tasks         Task[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Project {
  id          String    @id @default(cuid())
  clientName  String
  clientEmail String
  title       String
  description String
  budget      Float
  status      String
  deadline    DateTime?
  createdAt   DateTime  @default(now())

  userId      String?
  User        User?   @relation(fields: [userId], references: [id])
}

model Invoice {
  id            String    @id @default(cuid())
  invoiceId     String    @unique
  billerName    String
  billerEmail   String
  billerAddress String
  clientName    String
  clientEmail   String
  clientAddress String
  dueDate       DateTime?
  description   String
  price         Float
  quantity      Int
  total         Float
  status        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt

  userId       String?
  User         User?         @relation(fields: [userId], references: [id])

}

model Task {
  id         String   @id @default(cuid())
  Title      String
  priority   String
  status     String?
  createdAt  DateTime @default(now())

  userId     String?
  User       User ?   @relation(fields: [userId], references: [id])
}
